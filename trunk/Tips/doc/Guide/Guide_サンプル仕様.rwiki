
h1. サンプルプラグインの仕様

まず、どんなプラグインにするか考えてみましょう。

サンプルはなるべく標準的な形式を持つものにしたいところです。 Redmine の標準ということでチケットを参考にした簡単なものにします。

h2. 呼び出しメニュー

Redmine ではメニューが 3 つ用意されています。このうちプラグインの機能がどこから呼び出されるか決める必要があります。
* トップメニュー
* アカウントメニュー
* プロジェクトメニュー
* アプリケーションメニュー

*トップメニュー* ページの一番上に表示されます。
*アカウントメニュー* は一番上の右側に表示されているメニューで [個人設定] などのメニュー項目があります。
!top_menu.png!

*プロジェクトメニュー* はプロジェクトのタイトルのメニューの下に表示されているもので、プロジェクトを選択しているときに表示されます。

!project_menu.png!

*アプリケーションメニュー* はプロジェクトメニューと同じところに表示され、プロジェクトを選択していないときだけ表示します。そのため、 [ホーム] や [マイページ] を表示していないと選択することが出来ません。

使いわけは以下のような感じになると思います。
|_. メニュー |_. 用途 |
| トップメニュー | Redmine 全体に対する機能で、プロジェクトに属さないデータを扱う |
| アカウントメニュー | 個人設定などのユーザ個人向けの機能 |
| プロジェクトメニュー | プロジェクト個別の機能 |
| アプリケーションメニュー | トップメニューと同じ用途だが、使いづらいのであまり使用されない |

チケットなどのように Redmine ではデータは基本的にプロジェクトごとに管理されています。
今回はなるべく標準ということでプロジェクトごとにデータを管理し、メニューもプロジェクトメニューに追加します。


h2. プラグインの機能

サンプルのプラグインではチケットのように何らかのデータを表示、管理するものにします。

チケットではまずチケットの一覧が表示されます。
一覧のリスト項目から一つ選ぶとチケットの詳細が表示され、そのチケットに対していろいろな編集などの操作が出来ます。

これを参考にサンプルの必要な機能をまとめると次のような感じでしょう。
* データ一覧表示
** データの新規作成
** 1 つのデータの詳細表示
*** データの編集
*** データの削除

チケットの追加はよく使われるので、特に別のプロジェクトメニューになっていますが、他のニュース、文書などでは一覧画面の右上に新規作成のリンクがあることが多いのでそちらから追加することにします。

h2. 必要な画面

この機能に必要な画面は次のものです。
* 一覧表示
* 新規作成
* 詳細表示
* 編集

データの削除は今回はただ消すだけなので削除用のページは必要ないでしょう。

一覧表示
|index.png|

新規作成
|new.png|

詳細表示
|show.png|

* 編集
|edit.png|


h2. データの構成

プラグインに使うデータは特定の例にするのではなく、ちょっと抽象的なものを考えましょう。

まず、データを名前は必要でしょう。あとは一覧表示と詳細表示で見栄えがするように、簡易説明と詳細説明を付けましょう。
* 名前
* 簡易説明
* 詳細説明


次回からこの決めたプラグインの仕様を実装していきましょう。