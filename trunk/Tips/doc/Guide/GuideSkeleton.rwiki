
h1. プラグインのスケルトン作成と Rails の基礎

Redmine ではプラグインの雛形(スケルトン)を生成する機能があります。
プラグインを作る場合、まずスケルトンを生成し、それに中身を書き込んで実装していきます。



h2. プラグイン名前を決める

最初にプラグインの名前を決める必要があります。
サンプルなので何でもいいのですが、標準的なものということで *Standard* にしましょう。
今回のチュートリアルでは簡単なものですが、このサンプルに今後フィルタや wiki などの標準的な機能を付けてもっと標準的なものにしたいと考えています。それでこの標準サンプルを少し変更するだけでちょっとしたプラグインが作れるようにできたらいいなと思っています。


h2. スケルトン作成コマンドの実行

それでは実際にスケルトンを生成してみましょう。
Remine のトップディレクトリに移動して、以下のコマンドを実行します。
<pre>
$ ruby script/generate redmine_plugin Standard
</pre>

コマンドを実行すると @vender/plugins/redmine_standard@ 以下にスケルトンが生成されます。
他のプラグインをインストールしたことのある方はご存知だと思いますが、 @vender/plugins@ 以下の各ディレクトリがプラグインとして扱われます。

あと プラグインの名称の先頭に redmine_ と付いてますが、これはスケルトンの生成を使うと必ずプラグインの先頭に付くものです。命名規則として必須のものではないですが、わざわざ変えるのも面倒なのでそのままにしておきましょう。


h2. Rails の命名規則

前節で命名規則と書きましたが、Rails には *設定よりも規約* という方針があり、いろいろ名前を決めるときにはルールがあります。

例えば vender/plugins 以下のディレクトリをプラグインとして扱うのも規約です。このように決めておくことにより、ロードするプラグインのパスをしてする手間なく、簡単にプラグインを追加することが出来ます。

さらに Rails では ruby のメタプログラミングを利用してロードするファイルの指定を省くことが出来ます。メタプログラミングというのは、 ruby のスクリプト中でどのようなクラスやメソッドが知ることが出来たり、エラー処理を書き換えたりすることができる機能です。
例えば FooBar.new というような記述でクラスを作ったとします。通常、 FooBar は未定義ですというようなエラーがでるところで、 Rails ではエラー処理を拡張し、知らないクラスを使おうとすると foo_bar.rb という名前のファイルを探してロードします。
この探すファイルの名前の以下のようにしてクラス名から決めます。
# 大文字小文字による単語の区切りを _ (アンダーバー)に変換
# すべて小文字に変換
# 拡張子を .rb にする
また、 SomeMod::FooBar というようにモジュール内のクラスの場合は some_mod/foo_bar.rb というようにモジュール名をディレクトリとします。

ruby ではクラス名の先頭を大文字で始めるという決まりがあるので、 このように ruby のスクリプト内では先頭大文字で大文字小文字で単語の区切りを表し、ファイル名ではアンダーバー区切りの小文字を使うというのが Rails の命名の基本です。
そのため *Standard* と大文字で指定していたにもかかわらず、小文字に変換されています。もし StandardPlugin という名前にしていた場合には redmine_standard_plugin という名前になっています。また、プラグインの名前の指定で最初から standard_plugin というようにアンダーバー区切りで名前を指定することも可能です。

このような Rails の規約はまだいろいろありますが、出てきたときにその都度説明することにしていきます。


h2. MVC 構造

生成されたディレクトリ構成の説明の前に Rails では MVC 構造というアーキテクチャになっているので、先にこの説明をしておきしょう。 

MVC というのは  GUI アプリケーションを作る場合、こうした方がいいよというふうに古くから言われている構成でデザインパターンの有名な GoF 本でも紹介されています。それぞれ次のような意味です
|Model  | データを扱う部分 |
|View   | 表示、ユーザインターフェース部分 |
|Control| ユーザの入力に応答して処理する部分 |
ただ、 UI とデータを扱う部分をなるべく分けたほうがいいというのは確かなのですが、普通の GUI プログラムではこの View と Control は分離するのが難しいので、 Windows の Document-View 構造や Qt の Mode-View 構造のように V と C が一緒になっているのが最近では一般的です。
しかし Web アプリケーションに限って言えば、表示が html のページで、応答処理は CGI というように View と Control がはっきり分かれるので、MVC 構造はかなり有効です。それで Rails も MVC 構造としたのだと思います。


h2. プラグインのディレクトリ構成

