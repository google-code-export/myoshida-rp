h2. プロジェクトで利用可能にする

プラグインをプロジェクトごとに使用できるようするためにはモジュールとしての登録とプロジェクトメニューへの項目の追加が必要となります。


h2. モジュールと permission の設定

モジュールの登録ではモジュール名とアクションごとの実行する権限(permission)を指定します。

|_. 権限       |_. アクション       |
| データの表示 | index, view        |
| データの管理 | new, edit, destory |

権限の指定は init.rb の Redmine::Plugin::register メソッドで行います。次の記述をブロック内に追加してください。
<pre><code class="ruby">
  project_module :standard do
    permission :view_foos, :foos => [:index, :show]
    permission :manage_foos, :foos => [:new, :edit, :destroy],
               :require => :member
  end
</pre>
*project_module* メソッドの引数でモジュール名(standard)を指定し、ブロック内で *permission* メソッドを呼び出して権限の指定をしています。

permission メソッドの書式は次の形です。
<pre>
permission(name, hash, options={})
</pre>

第一引数で権限の名前を指定します。
第二引数でコントローラ名をキー、アクション名の配列を値としたハッシュで指定します。サンプルではコントローラは一つしかありませんが、複数あることもあるので、ハッシュで指定できるようになっています。
第三引数はオプションです。

Rails では次のようなスタイルがとられます。
* メソッドのオプション的な指定は最後の引数でハッシュを使ってまとめて渡す
* ハッシュが一つのペアしか持たない場合は括弧 {} は省略する

このオプションを使って、管理の権限ではプロジェクトメンバー以外の Non member や Anonymous(ログインしていない人)では使えないようにしています。

それでは Redmine を起動して、プラグインがプロジェクトで設定できるようにしましょう。

まず、管理メニューにあるロールと権限の *権限レポート* でチェックをいれて権限を与えます。

!permission.png!

次にプラグインを使いたいプロジェクトの設定で Standard モジュールを有効にします。

!module_add.png!

このときの表示は指定したモジュール名などがほぼそのまま表示されているだけですが、これを日本語に変更する方法は[[GuideI18n|国際化]]のところで説明します。


h2. プラグインメニューへの追加

プロジェクトで有効にしてもまだ何も変わりません。実際にこのプラグインを使えるようにするためにはプロジェクトメニューに項目を追加する必要があります。
プロジェクトメニューにはこのコントローラで最初に表示させたい画面に対応する index アクションを追加します。

メニュー項目の追加も init.rb で行います。先ほどの記述の後に以下を加えます。

<pre><code class="ruby">
  menu :project_menu, :standard, { :controller => 'foos', :action => 'index' }
</pre>

メニューの項目の追加は *menu* メソッドを使います。
<pre>
menu(menu, item, url, options={})
</pre>

第 1 引数はメニューの名前です。ここではプロジェクトメニューを指定します。指定できるメニューは [[GuideSampleSpec|サンプル仕様]] で説明した 4 つです。

|_. メニュー               |_. メニュー名      |
| トップメニュー	   | :top_menu         |
| アカウントメニュー	   | :account_menu     |
| プロジェクトメニュー	   | :project_menu     |
| アプリケーションメニュー | :application_menu |

第 2 引数はメニューの項目名です。

第 3 引数はメニューをクリックしたときのリンク先の URL を指定します。

第 4 引数はオプションでここでは省略しています。


h2. Rails での URL の指定方法

先ほどのメニューで行う URL の指定は *link_to* などの他の Rails のリンクの指定方法と同じです。
URL の指定方法については後でも使うのでもう少し詳しく説明しましょう。

URL として文字列を指定すると単純にその文字列が url として使用されますが、ハッシュで指定するとそれを元に URL を生成します。

指定するキーはコントロール名(:controller)、アクション名(:action)と ID(:id) で、そのキーの値を使って次のようなアドレスとなります。
<pre>
サーバアドレス/コントロール名/アクション名/ID名
</pre>

ID 名は省略可能で省略されると ID 名の部分はなくなります。ただし、ここで省略しているのはプロジェクトメニューから呼ばれると自動的に ID 名はプロジェクト名になるためです。サンプルのアドレスは以下のようになります。(プロジェクト名は demo にしています)
<pre>
http://127.0.0.1:3000/foos/index/demo
</pre>

ハッシュで指定された場合、実際には指定したコントロールのアクションが実行されることになります。ここでは FoosController の index メソッドが呼ばれます。
ID は *param* というハッシュクラスの変数に格納されてます。param は $ マークは付いてませんが、グローバル変数のようなものだと考えてください。


----

| [[プラグイン開発ガイド|^]] | [[GuideControlSkelton|<<]] | [[GuideModelSkelton|>>]] |
