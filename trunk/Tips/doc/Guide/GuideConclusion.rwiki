
h1. 終わりに

h2. まとめ

最後にプラグインの作り方のまとめてみます。

h3. Rails 

Rails のポイントは MVC 構造と 2 つの方針です。

h4. MVC 構造

|_. Model | データを扱う部分。クラスのインスタンスがデータベースの 1 つのレコードに対応し、テーブルからの取得にはクラスメソッドを使用する |
|_. View | html を作成する部分。 Erb で埋め込み式の ruby コードを評価して作成する |
|_. Control | ユーザのアクションに応答する部分。アクションに対応したメソッドを実行する |


h4. 方針

* 設定よりも規約
  名前に規則を持たせることで設定の手間を省き、簡単に作成できるようにする。
* 繰り返しの禁止
  同じことを何度も書かない。


h3. スケルトンの生成

プラグインを作るには雛形となるスケルトンを作成して、そこに中身を追加していきます。
スケルトンは *プラグイン全体* 、 *コントロール* 、 *モデル* の 3 つです。 View はコントロールと一緒に生成されます。

<pre>
$ ruby script/generate redmine_plugin プラグイン名
$ ruby script/generate redmine_plugin_controler プラグイン名 コントローラ名 [アクション名 ...]
$ ruby script/generate redmine_plugin_model プラグイン名 モデル名 [カラム名:型 ...]
</pre>

生成されるファイルの主要なディレクトリ構成は次のようなものです。

<pre>
init.rb			最初にロードされるファイル。プラグインの定義を記述
app/
├ controllers/         コントローラ
├ models/              モデル
└ views/               表示
db/migrate/             データベース操作
config/locales/         国際化用メッセージファイルの格納
</pre>


h4. プロジェクトごとのプラグイン

プロジェクトごとにデータ管理するプラグインにするために必要なことをあげます。

* init.rb
** プロジェクトモジュールの登録 project_module 
*** 各アクションの権限の指定 permission
** プロジェクトメニューへの項目の追加 menu
* コントローラクラス
** @project の設定 Project.find(params[:id])
** ログインチェック authorize
** メニューを選択状態 menu_item


h4. 国際化

config/locals 以下に言語別のメッセージファイル(en.yml, ja.yml など)を作成します。
メッセージファイルには、キーとメッセージのペアを記述します。

通常、メッセージを取得する場合には *l(:キー)* の 国際化ライブラリ(i18n)のメソッドを使用します。しかし、以下のものは自動的にキーが検索されます。あえてラベルを変えたい場合はオプションで :label の値を指定します。

|_. 項目       |_. 検索キー   | 例             |
| メニュー項目 | label_項目名 | label_standard |
| モジュール名 | project_module_モジュール名 | project_module_standard |
| 権限項目     | permission_名前 | permission_view_foos |
| フォームのフィールド | field_フィールド名 |field_subject |




