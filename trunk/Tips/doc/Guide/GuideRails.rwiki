
h1. Rails の概要

プラグインの説明に入る前に Rails について簡単に説明しましょう。
まず、Rails とはなにかというと Web アプリケーションのためのフレームワークです。


h2. フレームワーク

それでは、フレームワークとは何でしょう。
直訳すると *枠組み* です。 Web アプリケーションに限らず、プログラムでは決まりきった処理というのはたくさんあります。この面倒な決まりきった処理をやってくれるのがフレームワークです。フレームワークを使うことにより自分のアプリケーションの中身にだけを集中して作成することが出来ます。
また、単に面倒なことの肩代わりというだけでなく、専門的な知識が必要なこともやってくれます。例えば Rails を使えばデータベースやインターネットネットのセキュリティといったことをあまりよく知らなくても Web アプリケーションが作れてしいします。
似たようなものにライブラリというのがありますが、こちらはアプリケーションから利用するという感じなのに対してフレームワークでは枠組みにあわせてアプリケーションを作っていく感じです。

Redmine はこの Rails フレームワークを使って作られた Web アプリケーションです。 Redmine のプラグインを作る場合もこのフレームワークに沿って作っていく必要があります。


h2. MVC 構造

Rails フレームワークのアプリケーションの構造の特徴は MVC(Model View Control) という構造であるということです。

MVC というのは  GUI アプリケーションを作る場合、こうした方がいいよ というふうに古くから言われている構成で、 GoF 本と呼ばれるデザインパターンの有名な本でも紹介されています。
この M, V, C が表しているものはそれぞれ次のような部分です。

|Model  | データを扱う部分 |
|View   | 表示、ユーザインターフェース部分 |
|Control| ユーザの入力に応答して処理する部分 |

ただ、 ユーザインターフェース部分とデータを扱う部分をなるべく分けたほうがいいというのは確かなのですが、普通の GUI プログラムではこの View と Control は分けるのは難しいです。このため Windows の Document-View 構造や Qt の Mode-View 構造のように V と C が一緒になっている構造の方が一般的です。
しかし Web アプリケーションに限って言えば、表示が html のページで、応答処理は CGI というように View と Control がはっきり分かれるので、 MVC 構造はしっかりとはまります。
Rails に限らず CGI を使った Web アプリでは基本的に MVC のような構造になっているとは思いますが、 Rails の場合後述する *規約* という方針のため、 Model, View, Control という言葉はふんだんに出てきます。

!mvc.png!


h2. スケルトン作成コマンドの実行

それでは実際にスケルトンを生成してみましょう。
Remine のトップディレクトリに移動して、以下のコマンドを実行します。
<pre>
$ ruby script/generate redmine_plugin Standard
</pre>

コマンドを実行すると @vender/plugins/redmine_standard@ 以下にスケルトンが生成されます。
他のプラグインをインストールしたことのある方はご存知だと思いますが、 @vender/plugins@ 以下の各ディレクトリがプラグインとして扱われます。

あと プラグインの名称の先頭に redmine_ と付いてますが、これはスケルトンの生成を使うと必ずプラグインの先頭に付くものです。命名規則として必須のものではないですが、わざわざ変えるのも面倒なのでそのままにしておきましょう。


h2. Rails の命名規則

前節で命名規則と書きましたが、Rails には *設定よりも規約* という方針があり、いろいろ名前を決めるときにはルールがあります。

例えば vender/plugins 以下のディレクトリをプラグインとして扱うのも規約です。このように決めておくことにより、ロードするプラグインのパスをしてする手間なく、簡単にプラグインを追加することが出来ます。

さらに Rails では ruby のメタプログラミングを利用してロードするファイルの指定を省くことが出来ます。メタプログラミングというのは、 ruby のスクリプト中でどのようなクラスやメソッドが知ることが出来たり、エラー処理を書き換えたりすることができる機能です。
例えば FooBar.new というような記述でクラスを作ったとします。通常、 FooBar は未定義ですというようなエラーがでるところで、 Rails ではエラー処理を拡張し、知らないクラスを使おうとすると foo_bar.rb という名前のファイルを探してロードします。
この探すファイルの名前の以下のようにしてクラス名から決めます。
# 大文字小文字による単語の区切りを _ (アンダーバー)に変換
# すべて小文字に変換
# 拡張子を .rb にする
また、 SomeMod::FooBar というようにモジュール内のクラスの場合は some_mod/foo_bar.rb というようにモジュール名をディレクトリとします。

ruby ではクラス名の先頭を大文字で始めるという決まりがあるので、 このように ruby のスクリプト内では先頭大文字で大文字小文字で単語の区切りを表し、ファイル名ではアンダーバー区切りの小文字を使うというのが Rails の命名の基本です。
そのため *Standard* と大文字で指定していたにもかかわらず、小文字に変換されています。もし StandardPlugin という名前にしていた場合には redmine_standard_plugin という名前になっています。また、プラグインの名前の指定で最初から standard_plugin というようにアンダーバー区切りで名前を指定することも可能です。

このような Rails の規約はまだいろいろありますが、出てきたときにその都度説明することにしていきます。




h2. プラグインのディレクトリ構成

---

| [[プラグイン開発ガイド|^]] | [[GuideDevEnv|<<]] | [[GuideSampleSpec|>>]] |
