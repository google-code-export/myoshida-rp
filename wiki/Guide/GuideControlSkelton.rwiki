
h1. コントローラのスケルトンの生成

次に MVC のうちの Control を作っていきましょう。
プラグイン、モデルのスケルトン作成と同様にコントローラにもスケルトン作成機能があります。

h2. コントローラ、アクションの名前を決める

今度もスケルトンを生成するにはまずコントローラとアクションの名前を決めておく必要があります。
 
コントローラはよくモデルを複数形にして名前が付けられます。モデルの名前は Foo としましたので、コントローラの名前を *Foos* にします。この複数形にするのは特にそう決まっているあるわけではありません。例えば、用語(Term)を管理するのは用語集(Glossary)、予約(Event)を管理するのはスケジュール張(Scheduler)といったように管理するデータをまとめる感じの分かりやすい名前であれば、何でも構いません。

次にアクションの名前を決めます。 [[GuideSampleSpec|サンプルの仕様]] で考えたアクションに対して、それぞれチケットなどの実装をまねて名前を付けました。

|_. アクション |_. 名前  |
| 一覧表示     | index   |
| 新規作成     | new	 |
| 詳細表示     | show	 |
| 編集	       | edit	 |
| 削除	       | destory |


h2. コントローラのスケルトン作成コマンドの実行

コントローラのスケルトンの実行コマンドの書式は次のような形です。

<pre>
$ ruby script/generate redmine_plugin_controler プラグイン名 コントローラ名 [アクション名 ...]
</pre>

Redmine のトップディレクトリに移動して、決めた名前で実際にコマンドを実行するのですが、ここでは削除(destory)アクションは除いています。

<pre>
$ ruby script/generate redmine_plugin_control Standard Foos index new show edit
</pre>

実行結果
<pre>
      exists  app/controllers/
      exists  app/helpers/
      create  app/views/foos
      create  test/functional/
      create  app/controllers/foos_controller.rb
      create  test/functional/foos_controller_test.rb
      create  app/helpers/foos_helper.rb
      create  app/views/foos/index.html.erb
      create  app/views/foos/new.html.erb
      create  app/views/foos/show.html.erb
      create  app/views/foos/edit.html.erb
</pre>

実行結果を見ていただけるとコントローラだけでなく、アクションに対応するビューもできていることが分かると思います。 Rails ではデフォルトではアクションを実行するとその名前に対応するビューのファイルを探してそれを表示するようになっています。削除(destory)は画面を必要としていなかったので、スケルトンの生成では destory を指定しませんでした。 destory は後でスケルトンを使わずに直接記述することにします。



h2. コントローラの生成ファイル

コントローラの生成ファイル(app/controllers/foos_controller.rb )を見てみましょう。

<pre><code class="ruby">
class FoosController < ApplicationController
  unloadable



  def index
  end


  def new
  end


  def show
  end


  def edit
  end

end
</code></pre>

コントローラは ApplicationController クラスを継承したクラスで実現され、一つのメソッドが一つのアクションに相当します。
2 行目に unloadable は Model で出てきたものと同じで、これを書いておかないと development モードで正常に動作しなくなります。


h2. ビューの生成ファイル

ビューの生成ファイルとして app/views/foos/index.html.erb も見てみます。

<pre><code class="html">
<h2>Foos#index</h2>
</code></pre>

といっても大して意味のない html が書かれているだけです。 ここに今後コントローラから渡されたデータなどの中身を書いていくことになります。
html ですが *Erb* という埋め込み型の ruby を使って、html 中で ruby のコードを実行できます。


h2. Erb (Embeded ruby)

Erb ではファイル内の *<%* と *%%>* の間が ruby スクリプトとして評価されます。
また、 *<%%=* と *%>* を使うとスクリプトの結果がファイルに埋め込まれます。

例えば、以下のようなコードを記述したとします。

<pre><code class="rhtml">
<% for val in [1, 2, 3] %>
  <%= val %> <br />
<% end %>
</code></pre>

生成されるファイルでは for などの繰り返しもちゃんと処理してくれます。また、 <%= %> は文字列中の #{} と同じで必ず to_s メソッドを使って文字列に変換されます。

<pre><code class="html">
  1 <br />
  2 <br />
  3 <br />
</code></pre>


---

| [[プラグイン開発ガイド|^]] | [[GuideInitRb|<<]] | [[GuideForProject|>>]] |
